{"version":3,"file":"admin-CeWFm822.js","sources":["../../src/js/admin.js"],"sourcesContent":["import { auth, messaging } from './firebase-config.js';\nimport { getFirestore, collection, query, orderBy, onSnapshot, deleteDoc, doc, setDoc, getDoc, updateDoc, getDocs, addDoc, where } from 'firebase/firestore';\nimport { getToken } from 'firebase/messaging';\n\nconst db = getFirestore();\nconst messagesList = document.getElementById('messagesList');\n\n// Cache the auth state to prevent redirect flicker\nlet isAdmin = false;\n\n// Request notification permission and save token\nasync function setupNotifications() {\n    try {\n        const permission = await Notification.requestPermission();\n        if (permission === 'granted') {\n            const token = await getToken(messaging, {\n                vapidKey: 'BOanVJq4Mf-4H8MXPLg-5GnuUwORDbxsvFxjXOEQEYJSIIu2sJCh85L-69I-GRPcwgALivkh_k2XH1eQfKu-bTo' // Your VAPID key\n            });\n            \n            // Save token to Firestore\n            await setDoc(doc(db, 'adminTokens', auth.currentUser.uid), {\n                token,\n                email: auth.currentUser.email,\n                lastUpdated: new Date()\n            });\n        }\n    } catch (error) {\n        console.error('Error setting up notifications:', error);\n    }\n}\n\n// Update isUserAdmin function to be more permissive\nasync function isUserAdmin(user) {\n    if (!user) return false;\n    \n    // Super admin check\n    if (user.email === 'ag.aliengamerz@gmail.com') return true;\n    \n    try {\n        // Add hamza.datashare@gmail.com as a trusted admin\n        if (user.email === 'hamza.datashare@gmail.com') return true;\n        \n        // Check regular admin status\n        const adminQuery = query(\n            collection(db, 'admins'), \n            where('email', '==', user.email.toLowerCase())\n        );\n        const adminSnapshot = await getDocs(adminQuery);\n        return !adminSnapshot.empty;\n    } catch (error) {\n        console.error('Error checking admin status:', error);\n        return false;\n    }\n}\n\n// Update loadMessages function\nfunction loadMessages() {\n    const q = query(collection(db, 'messages'), orderBy('timestamp', 'desc'));\n    const messagesList = document.getElementById('messagesList');\n    \n    if (!messagesList) {\n        console.error('Messages list element not found');\n        return;\n    }\n\n    try {\n        const unsubscribe = onSnapshot(q, (snapshot) => {\n            messagesList.innerHTML = '';\n            \n            if (snapshot.empty) {\n                messagesList.innerHTML = '<p class=\"no-messages\">No messages yet</p>';\n                return;\n            }\n\n            snapshot.forEach((doc) => {\n                const message = doc.data();\n                const date = message.timestamp?.toDate?.() \n                    ? message.timestamp.toDate().toLocaleString() \n                    : 'No date';\n                \n                messagesList.innerHTML += `\n                    <div class=\"message-card\" id=\"${doc.id}\">\n                        <div class=\"message-header\">\n                            <h3>${message.name || 'Anonymous'}</h3>\n                            <span class=\"message-date\">${date}</span>\n                        </div>\n                        <div class=\"message-email\">\n                            <a href=\"mailto:${message.email}\">${message.email}</a>\n                        </div>\n                        <p class=\"message-content\">${message.message}</p>\n                        <div class=\"message-actions\">\n                            <button onclick=\"deleteMessage('${doc.id}')\" class=\"delete-btn\">\n                                Delete\n                            </button>\n                            <button onclick=\"replyToEmail('${message.email}')\" class=\"reply-btn\">\n                                Reply\n                            </button>\n                        </div>\n                    </div>\n                `;\n            });\n        }, (error) => {\n            console.error('Error loading messages:', error);\n            messagesList.innerHTML = '<p class=\"error-message\">Error loading messages. Please refresh the page.</p>';\n        });\n\n        // Cleanup listener on page change\n        window.addEventListener('unload', () => unsubscribe());\n\n    } catch (error) {\n        console.error('Error setting up message listener:', error);\n    }\n}\n\n// Add navigation handling\ndocument.querySelectorAll('.nav-link').forEach(link => {\n    link.addEventListener('click', (e) => {\n        if (link.getAttribute('href').startsWith('#')) {\n            e.preventDefault();\n            const section = link.getAttribute('data-section');\n            showSection(section);\n        }\n    });\n});\n\n// Update showSection to refresh admin lists when switching sections\nfunction showSection(sectionId) {\n    document.querySelectorAll('.content-section').forEach(section => {\n        section.classList.remove('active');\n    });\n    document.querySelectorAll('.nav-link').forEach(link => {\n        link.classList.remove('active');\n    });\n    \n    const targetSection = document.getElementById(`${sectionId}-section`);\n    const targetLink = document.querySelector(`[data-section=\"${sectionId}\"]`);\n    \n    if (targetSection) {\n        targetSection.classList.add('active');\n        // Refresh admin lists when switching to admin sections\n        if (sectionId === 'admin-management' || sectionId === 'admins') {\n            loadAdmins();\n            loadAdminList();\n        }\n    }\n    \n    if (targetLink) {\n        targetLink.classList.add('active');\n    }\n}\n\n// Update loadAdmins function to handle errors better\nasync function loadAdmins() {\n    const adminList = document.getElementById('adminList');\n    if (!adminList) {\n        console.error('Admin list element not found');\n        return;\n    }\n\n    try {\n        // Query admins collection\n        const adminsQuery = query(collection(db, 'admins'));\n        const querySnapshot = await getDocs(adminsQuery);\n        \n        console.log('Found admins:', querySnapshot.size); // Debug log\n\n        adminList.innerHTML = ''; // Clear existing list\n        \n        if (querySnapshot.empty) {\n            adminList.innerHTML = '<p>No admins found</p>';\n            return;\n        }\n\n        querySnapshot.forEach((doc) => {\n            const admin = doc.data();\n            console.log('Admin:', admin); // Debug log\n            \n            const isSuperAdmin = admin.email === 'ag.aliengamerz@gmail.com' || admin.isSuperAdmin;\n            const isOriginalSuperAdmin = auth.currentUser?.email === 'ag.aliengamerz@gmail.com';\n\n            adminList.innerHTML += `\n                <div class=\"admin-item\">\n                    <div class=\"admin-info\">\n                        <div class=\"admin-email\">${admin.email}</div>\n                        <div class=\"admin-meta\">\n                            <span class=\"admin-type ${isSuperAdmin ? 'super' : 'regular'}\">\n                                ${isSuperAdmin ? 'Super Admin' : 'Admin'}\n                            </span>\n                            <span class=\"admin-date\">\n                                Added: ${admin.addedAt?.toDate().toLocaleDateString() || 'N/A'}\n                            </span>\n                        </div>\n                    </div>\n                    ${isOriginalSuperAdmin && admin.email !== 'ag.aliengamerz@gmail.com' ? `\n                        <div class=\"admin-actions\">\n                            <button onclick=\"toggleAdminRole('${admin.email}')\" class=\"role-btn\">\n                                ${admin.isSuperAdmin ? 'Make Admin' : 'Make Super Admin'}\n                            </button>\n                            <button onclick=\"removeAdmin('${admin.email}')\" class=\"delete-btn\">\n                                Remove\n                            </button>\n                        </div>\n                    ` : ''}\n                </div>\n            `;\n        });\n    } catch (error) {\n        console.error('Error loading admins:', error);\n        adminList.innerHTML = '<p class=\"error\">Error loading admins. Please try again.</p>';\n    }\n}\n\n// Load and display admin list\nasync function loadAdminList() {\n    const adminsList = document.getElementById('adminsList');\n    console.log('Loading admin list... Element found:', !!adminsList);\n    \n    if (!adminsList) return;  // Guard clause if element doesn't exist\n\n    const q = query(collection(db, 'admins'));\n    \n    try {\n        console.log('Fetching admin list data...');\n        const snapshot = await getDocs(q);\n        console.log('Admin list entries found:', snapshot.size);\n        \n        adminsList.innerHTML = '';\n        snapshot.forEach((doc) => {\n            const admin = doc.data();\n            console.log('Admin list entry:', admin);\n            const isSuperAdmin = admin.isSuperAdmin || admin.email === 'ag.aliengamerz@gmail.com';\n            const isOriginalSuperAdmin = auth.currentUser?.email === 'ag.aliengamerz@gmail.com';\n            \n            adminsList.innerHTML += `\n                <div class=\"admin-item\">\n                    <div class=\"admin-info\">\n                        <div class=\"admin-email\">${admin.email}</div>\n                        <div class=\"admin-meta\">\n                            <span class=\"admin-type ${isSuperAdmin ? 'super' : 'regular'}\">\n                                ${isSuperAdmin ? 'Super Admin' : 'Admin'}\n                            </span>\n                            <span class=\"admin-date\">\n                                Added: ${admin.addedAt.toDate().toLocaleDateString()}\n                            </span>\n                        </div>\n                    </div>\n                    ${(isOriginalSuperAdmin && admin.email !== 'ag.aliengamerz@gmail.com') ? `\n                        <div class=\"admin-actions\">\n                            <button onclick=\"toggleAdminRole('${doc.id}')\" \n                                class=\"role-btn\" title=\"Toggle Role\">\n                                ${admin.isSuperAdmin ? 'Make Admin' : 'Make Super Admin'}\n                            </button>\n                            <button onclick=\"removeAdmin('${doc.id}')\" \n                                class=\"delete-btn\" title=\"Remove Admin\">\n                                <svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n                                    <path fill=\"currentColor\" d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"/>\n                                </svg>\n                            </button>\n                        </div>\n                    ` : ''}\n                </div>\n            `;\n        });\n    } catch (error) {\n        console.error('Error in loadAdminList:', error);\n    }\n}\n\n// Add modal control functions\nfunction openAdminModal() {\n    document.getElementById('adminModal').classList.remove('hidden');\n    loadAdminList();\n}\n\nfunction closeAdminModal() {\n    document.getElementById('adminModal').classList.add('hidden');\n}\n\n// Add new modal control functions\nwindow.openAddAdminModal = function() {\n    document.getElementById('addAdminModal').classList.remove('hidden');\n    document.getElementById('adminEmail').focus();\n};\n\nwindow.closeAddAdminModal = function() {\n    document.getElementById('addAdminModal').classList.add('hidden');\n    document.getElementById('addAdminForm').reset();\n};\n\n// Add role change function\nwindow.changeAdminRole = async (adminId) => {\n    try {\n        const adminDoc = await getDoc(doc(db, 'admins', adminId));\n        const admin = adminDoc.data();\n        const newRole = admin.isSuperAdmin ? 'admin' : 'super admin';\n        \n        if (confirm(`Change ${admin.email}'s role to ${newRole}?`)) {\n            await updateDoc(doc(db, 'admins', adminId), {\n                isSuperAdmin: !admin.isSuperAdmin,\n                roleChangedBy: auth.currentUser.email,\n                roleChangedAt: new Date()\n            });\n            \n            alert('Admin role updated successfully');\n        }\n    } catch (error) {\n        console.error('Error changing admin role:', error);\n        alert('Failed to change admin role');\n    }\n};\n\n// Update addAdmin function\nwindow.addAdmin = async () => {\n    try {\n        if (auth.currentUser?.email !== 'ag.aliengamerz@gmail.com') {\n            throw new Error('Only super admin can add new admins');\n        }\n\n        const email = prompt('Enter new admin email:')?.toLowerCase().trim();\n        if (!email) return;\n\n        // Use email as the document ID\n        const adminRef = doc(db, 'admins', email);\n        const adminDoc = await getDoc(adminRef);\n\n        if (adminDoc.exists()) {\n            throw new Error('This email is already an admin');\n        }\n\n        await setDoc(adminRef, {\n            email: email,\n            addedBy: auth.currentUser.email,\n            addedAt: new Date(),\n            isSuperAdmin: false\n        });\n\n        alert('Admin added successfully');\n        await loadAdmins(); // Refresh the list\n    } catch (error) {\n        console.error('Error adding admin:', error);\n        alert(error.message);\n    }\n};\n\n// Update form submission handler\ndocument.addEventListener('DOMContentLoaded', () => {\n    document.getElementById('closeAdminModal').addEventListener('click', closeAdminModal);\n    \n    // Close modal when clicking outside\n    document.getElementById('adminModal').addEventListener('click', (e) => {\n        if (e.target.id === 'adminModal') closeAdminModal();\n    });\n\n    // Close modal on outside click\n    document.getElementById('addAdminModal').addEventListener('click', (e) => {\n        if (e.target.id === 'addAdminModal') closeAddAdminModal();\n    });\n\n    const addAdminForm = document.getElementById('addAdminForm');\n    if (addAdminForm) {\n        addAdminForm.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const emailInput = document.getElementById('adminEmail');\n            const isSuperAdminInput = document.getElementById('isSuperAdmin');\n            \n            if (!emailInput) return;\n            \n            const email = emailInput.value.trim().toLowerCase();\n            const isSuperAdmin = isSuperAdminInput?.checked || false;\n            \n            try {\n                if (auth.currentUser?.email !== 'ag.aliengamerz@gmail.com') {\n                    throw new Error('Only super admin can add new admins');\n                }\n\n                // Use email as document ID\n                const adminRef = doc(db, 'admins', email);\n                const adminDoc = await getDoc(adminRef);\n                \n                if (adminDoc.exists()) {\n                    throw new Error('This email is already an admin');\n                }\n\n                await setDoc(adminRef, {\n                    email,\n                    isSuperAdmin,\n                    addedBy: auth.currentUser.email,\n                    addedAt: new Date()\n                });\n\n                closeAddAdminModal();\n                alert('Admin added successfully');\n                loadAdminList();\n                loadAdmins();\n            } catch (error) {\n                console.error('Error adding admin:', error);\n                alert(error.message);\n            }\n        });\n    }\n});\n\n// Remove admin\nwindow.removeAdmin = async (adminId) => {\n    try {\n        const currentUser = auth.currentUser;\n        if (currentUser.email !== 'ag.aliengamerz@gmail.com') {\n            throw new Error('Only super admin can remove admins');\n        }\n\n        if (confirm('Are you sure you want to remove this admin?')) {\n            await deleteDoc(doc(db, 'admins', adminId));\n            alert('Admin removed successfully');\n        }\n    } catch (error) {\n        console.error('Error removing admin:', error);\n        alert(error.message);\n    }\n};\n\n// Add super admin promotion functionality\nwindow.promoteToSuperAdmin = async () => {\n    const email = prompt('Enter email of admin to promote to super admin:');\n    if (!email) return;\n\n    try {\n        const currentUser = auth.currentUser;\n        if (currentUser.email !== 'ag.aliengamerz@gmail.com') {\n            throw new Error('Only the original super admin can promote others');\n        }\n\n        const adminDoc = await getDocs(query(collection(db, 'admins'), where('email', '==', email)));\n        if (adminDoc.empty) {\n            throw new Error('User is not an admin');\n        }\n\n        await updateDoc(adminDoc.docs[0].ref, {\n            isSuperAdmin: true,\n            promotedBy: currentUser.email,\n            promotedAt: new Date()\n        });\n\n        alert('Admin promoted to super admin successfully');\n    } catch (error) {\n        console.error('Error promoting admin:', error);\n        alert(error.message);\n    }\n};\n\n// Update auth state check to fix race condition\nlet authInitialized = false;\n\nauth.onAuthStateChanged(async (user) => {\n    if (!authInitialized) {\n        authInitialized = true;\n        \n        if (!user) {\n            window.location.href = 'index.html';\n            return;\n        }\n\n        try {\n            const isAdmin = await isUserAdmin(user);\n            if (!isAdmin) {\n                window.location.href = 'index.html';\n                return;\n            }\n\n            const isSuperAdmin = user.email === 'ag.aliengamerz@gmail.com';\n            await setupUI(user, isSuperAdmin);\n\n        } catch (error) {\n            console.error('Error checking admin status:', error);\n            window.location.href = 'index.html';\n        }\n    }\n});\n\n// Update setupUI to handle both super admins and trusted admins\nasync function setupUI(user, isSuperAdmin) {\n    try {\n        const userDisplay = document.getElementById('userDisplay');\n        if (userDisplay) {\n            userDisplay.textContent = user.email;\n        }\n        \n        // Show admin controls for both super admin and trusted admin\n        if (isSuperAdmin || user.email === 'hamza.datashare@gmail.com') {\n            const superAdminLinks = document.getElementById('superAdminLinks');\n            if (superAdminLinks) {\n                superAdminLinks.classList.remove('hidden');\n            }\n            document.querySelectorAll('.admin-controls')?.forEach(el => \n                el.classList.remove('hidden')\n            );\n        }\n\n        // Initialize features\n        await setupNotifications();\n        loadMessages();\n        await loadAdmins();\n        await loadAdminList();\n\n    } catch (error) {\n        console.error('Error setting up UI:', error);\n    }\n}\n\n// Delete message\nwindow.deleteMessage = async (messageId) => {\n    if (confirm('Are you sure you want to delete this message?')) {\n        try {\n            await deleteDoc(doc(db, 'messages', messageId));\n            console.log('Message deleted successfully');\n        } catch (error) {\n            console.error('Error deleting message:', error);\n            alert('Failed to delete message');\n        }\n    }\n};\n\n// Reply to email\nwindow.replyToEmail = (email) => {\n    window.location.href = `mailto:${email}`;\n};\n"],"names":["db","getFirestore","setupNotifications","token","getToken","messaging","setDoc","doc","auth","error","isUserAdmin","user","adminQuery","query","collection","where","getDocs","loadMessages","q","orderBy","messagesList","unsubscribe","onSnapshot","snapshot","message","date","_b","_a","link","e","section","showSection","sectionId","targetSection","targetLink","loadAdmins","loadAdminList","adminList","adminsQuery","querySnapshot","admin","isSuperAdmin","isOriginalSuperAdmin","adminsList","closeAdminModal","adminId","getDoc","newRole","updateDoc","email","adminRef","addAdminForm","emailInput","isSuperAdminInput","deleteDoc","currentUser","adminDoc","authInitialized","setupUI","userDisplay","superAdminLinks","el","messageId"],"mappings":"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"}